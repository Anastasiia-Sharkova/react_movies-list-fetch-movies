{"version":3,"sources":["components/FindMovie/FindMovie.tsx","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","App.tsx","index.tsx"],"names":["Error","MovieCard","props","movie","className","src","Poster","alt","Title","Plot","MoviesList","movies","map","imdbID","getMovie","endpoint","a","fetch","response","json","FindMovie","addMovie","isMovieInTheList","useState","title","setTitle","setMovie","noError","isErrorMessage","setIsErrorMessage","handleChange","useCallback","event","target","value","getMovieFromServer","trim","hasEmptyQuery","newMovie","Response","hasFindError","onAddMovie","preventDefault","hasAddedMovie","hasQueryError","name","onSubmit","htmlFor","type","onChange","id","placeholder","length","onClick","App","setMovies","some","currentMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.497061f8.chunk.js","sourcesContent":["import React, { FormEvent, useCallback, useState } from 'react';\nimport { getMovie } from '../../api';\nimport './FindMovie.scss';\n\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  addMovie: (newMovie: Movie) => void,\n  isMovieInTheList: (movie: Movie) => boolean,\n}\n\nenum Error {\n  noError = '',\n  hasFindError = 'Can\\'t find a movie with such a title',\n  hasQueryError = 'Select a movie first',\n  hasEmptyQuery = 'Enter search text',\n  hasAddedMovie = 'The movie is already on the list',\n}\n\nexport const FindMovie: React.FC<Props> = ({ addMovie, isMovieInTheList }) => {\n  const [title, setTitle] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isErrorMessage, setIsErrorMessage] = useState(Error.noError);\n\n  const handleChange = useCallback((\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setTitle(event.target.value);\n    setIsErrorMessage(Error.noError);\n  }, []);\n\n  const validateMessage = () => {\n    if (!title.trim()) {\n      setIsErrorMessage(Error.hasEmptyQuery);\n\n      return false;\n    }\n\n    return true;\n  };\n\n  const getMovieFromServer = useCallback(async () => {\n    setIsErrorMessage(Error.noError);\n\n    if (validateMessage()) {\n      const newMovie = await getMovie(title);\n\n      if (newMovie.Response !== 'False') {\n        setMovie(newMovie);\n      } else {\n        setIsErrorMessage(Error.hasFindError);\n      }\n    }\n  }, [title, isErrorMessage]);\n\n  const onAddMovie = useCallback((event: FormEvent) => {\n    event.preventDefault();\n\n    if (movie) {\n      if (isMovieInTheList(movie)) {\n        setIsErrorMessage(Error.hasAddedMovie);\n      } else {\n        addMovie(movie);\n        setTitle('');\n        setIsErrorMessage(Error.noError);\n      }\n    }\n\n    if (!movie) {\n      setIsErrorMessage(Error.hasQueryError);\n    }\n\n    setMovie(null);\n  }, [movie]);\n\n  return (\n    <>\n      <form\n        name=\"find-movie-form\"\n        className=\"find-movie\"\n        onSubmit={(event) => event.preventDefault()}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              value={title}\n              name={title}\n              onChange={handleChange}\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input\"\n            />\n          </div>\n\n          {isErrorMessage.length > 0 && (\n            <p className=\"help is-danger\">\n              {isErrorMessage}\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={getMovieFromServer}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={onAddMovie}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie;\n};\n\nexport const MovieCard: React.FC<Props> = (props) => {\n  const { movie } = props;\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            src={movie.Poster}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\">{movie.Title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\">\n          {movie.Plot}\n          <br />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = (props) => {\n  const { movies } = props;\n\n  return (\n    <div className=\"movies\">\n      {movies.map(movie => (\n        <MovieCard\n          key={movie.imdbID}\n          movie={movie}\n        />\n      ))}\n    </div>\n  );\n};\n","const BASE_URL = 'https://www.omdbapi.com/?i=tt3896198&apikey=2d3b5cf4';\n\nexport const getMovie = async (endpoint: string) => {\n  const response = await fetch(`${BASE_URL}&t=${endpoint}`);\n\n  return response.json();\n};\n","import React, { useCallback, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const isMovieInTheList = useCallback((movie: Movie) => {\n    return movies.some(currentMovie => currentMovie.imdbID === movie.imdbID);\n  }, [movies]);\n\n  const addMovie = useCallback((movie: Movie) => {\n    setMovies([...movies, movie]);\n  }, [movies]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList\n          movies={movies}\n        />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovie={addMovie}\n          isMovieInTheList={isMovieInTheList}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}